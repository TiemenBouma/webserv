	TEAM NAMES:

	POLL and protection:
[] Check why poll hangs if I only one one poll.
[] check all recv, read and send (check -1 and 0).

	PARSER:
[] Same poort nr in config file check double.
[] add keyword redir that takes two values, number(statuscode) and webpage(index)

	AUTOINDEX:
[] autoidex of utils//uploads. Need to show the files corectly?
[] what if there is no index?

	HOMEPAGE
[] without username globals
[] redir button also post cgi button

	REDIRECTION
[] if statement that checks for status 301 
[] figure out how to make it work in the webserver_execute function. [TIEMEN] 


______________________________________________________________________________

	AUTOINDEX:
[x] how to open/show files and dirs when clicking
[x] create temporary new locations on server
[] when there is no index, show root.	[TIEMEN] what do we mean by index here? Show Root is a securety risk. If AI is on we just show the location I think.
[] empty uploads before eval
[x] read about behavior autoindex [TIEMEN] Done
[x] autoindex, displays listing of directories from root or location? [TIEMEN] Location

	CGI:
[x] add environment variabes cgi
	COMMENT: for now no, check other teams
[x] add pass post content to cgi
[x] add cgi that can upload image
[x] add cgi the can processes and uploads a form
[x] error page wrong header, not runnable script (necessary?)
[] 

	PARSER:
[] not handling comments in config file
[] define back slash standard 
	root never ends with it and location always starts with it
[x] no exception called for double keywords
[] when printing locations, the code prints typo uploadss
[x] Check extensions. Give an exception "Invalid config file. Try [right_file]
[] wrong exception caught for ./webserv [any other file]
[] add all error pages in default folder,and check if it works.
[] dont forget to change default error pages on config.cpp function check_req_direcs

[] root utils; (without dash)

	NEW: (Sietse)
[] add environment variabes cgi
[x] add pass post content to cgi
[] add cgi that can upload image
[] add cgi the can processes and uploads a form
[] figure out why error_page.css get requested when cgi is called

	NEW: (Swenne)
	DONE: (Swenne)
[x] moved non-member functions from Config.cpp to parser.cpp
[] Check error behavior for ./webserv utils/error.conf
[] Check behavior when accepting request GETT or POOST (typos)


	DONE: (Tiemen) 
[x] no segfault when using ./webserv wrong_file.html (accepts as config)
[x] added exit(1); in main in line 41 for the program to exit.
[x] getting no error page for wrong urls, I changed te config - need help getting css to work again.
[x] Check if it works without css. (Tiemen)

	DONE: (Sietse)
[x] Invalid file, invalid extension
[x] Invalid input , too few or too many files
[x] makefile in root
[x] two config.hpp header files?
[x] in DELETE request getting 500 internal server error when changing the homepage html extension. 

	Team discussion:
[] discuss with other teams what redirection is.
	[]Setup routes in a server to different directories. 301 status
[] Check poll() timelimit 
	COMMENT: (Tiemen) Someowhat related: we can use Poll() only once, So I need to remove 1 poll() in the server.
[] check if control+Z is an issue (killing terminal problem)
[x] discuss file permission error	
	[]check CGI error page, what number
	[] check if cgi returns content type header
[] Check if we are going to do the NONBLOCKING method
	If cgi runs with a while(1) script, it should not block other sockets/requests
[] Protected fcntl() for < 0 or not necessary?

	SOLVED:
[x] Check poll() return value
[x] autoindex not working yet.
[x] check which error pages are needed
[x] accept new connection fail (protected?)
[x] check default status codes, what should we handle
[x] Search for all read/recv/write/send on a socket and check that, if an error is returned, the client is removed.





### 				EVALSHEET:

# Mandatory Part

Check the code and ask questions
- Launch the installation of siege with homebrew.
- Ask explanations about the basics of an HTTP server.
- Ask what function the group used for I/O Multiplexing.
- Ask for an explanation of how does select() (or equivalent) work.
- Ask if they use only one select() (or equivalent) and how they've managed the server to accept and the client to read/write.
- The select() (or equivalent) should be in the main loop and should check file descriptors for read and write AT THE SAME TIME. 
- There should be only one read or one write per client per select() (or equivalent). 
- Ask the group to show you the code from the select() (or equivalent) to the read and write of a client.
- Search for all read/recv/write/send on a socket and check that, if an error is returned, the client is removed.
- Search for all read/recv/write/send and check if the returned value is correctly checked (checking only -1 or 0 values is not enough, both should be checked).
- If errno is checked after read/recv/write/send, the grade is 0 and the evaluation process ends now.
- Writing or reading ANY file descriptor without going through the select() (or equivalent) is strictly FORBIDDEN.
- The project must compile without any re-link issue. If not, use the 'Invalid compilation' flag.
- If any point is unclear or is not correct, use the flag for 'Incomplete work'.


# Configuration
In the configuration file, check whether you can do the following and test the result:

- Search for the HTTP response status codes list on the internet. During this evaluation, if any status codes is wrong, don't give any related points.
- Setup multiple servers with different ports.
- Setup multiple servers with different hostnames 
(use something like: curl --resolve example.com:80:127.0.0.1 http://example.com/).
- Setup default error page (try to change the error 404).
- Limit the client body 
(use: curl -X POST -H "Content-Type: plain/text" --data "BODY IS HERE write something shorter or longer than body limit").
- Setup routes in a server to different directories.
- Setup a default file to search for if you ask for a directory.
- Setup a list of methods accepted for a certain route (e.g., try to delete something with and without permission).


# Basic checks
Using telnet, curl, prepared files, demonstrate that the following
features work properly:

- GET requests -> should work
- POST requests -> should work
- DELETE requests -> should work
- UNKNOWN requests -> should not produce any crash
- For every test the status code must be correct
-Upload some file to the server and get it back


# Check CGI
Pay attention to the following:
- The server is working fine using a CGI.
- The CGI should be run in the correct directory for relative path file access.
- With the help of the evaluation group you should check that everything is working properly. You have to test the CGI with the methods "GET", "POST" and "DELETE".
- You need to test with files containing errors to see if the error handling works properly. You can use a script containing an infinite loop or an error; you are free to do - - whatever tests you want within the limits of acceptability that remain at your discretion. The group being evaluated should help you with this.
- The server should never crash and an error should be visible in case of a problem.


# Check with a browser
Use the reference browser of the team. Open the network part of it, and try to connect to the server using it.
Look at the request header and response header.
It should be compatible to serve a fully static website.
- Try a wrong URL on the server.
- Try to list a directory.
- Try a redirected URL.
- Try anything you want to.


# Port issues
In the configuration file setup multiple ports and use different websites. Use the browser to ensure that the configuration works as expected and shows the right website.
In the configuration, try to setup the same port multiple times. It should not work.
Launch multiple servers at the same time with different configurations but with common ports. Does it work? If it does, ask why the server should work if one of the configurations isn't functional. Keep going.


# Siege & stress test
Use Siege to run some stress tests.
Availability should be above 99.5% for a simple GET on an empty page with a siege -b on that page.
Verify there is no memory leak (Monitor the process memory usage. It should not go up indefinitely).
Check if there is no hanging connection.
You should be able to use siege indefinitely without having to restart the server (take a look at siege -b).


# Bonus part
Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.

# Cookies and session
There is a working session and cookies system on the webserver.
# CGI
There is more than one CGI system.
# Ratings
Donâ€™t forget to check the flag corresponding to the defense




### 	SUBJECT :


# Introduction
The Hypertext Transfer Protocol (HTTP) is an application protocol for distributed, collaborative, hypermedia information systems.

HTTP is the foundation of data communication for the World Wide Web, where hypertext documents include hyperlinks to other resources that the user can easily access.
For example, by a mouse click or by tapping the screen in a web browser. HTTP was developed to facilitate hypertext and the World Wide Web.

The primary function of a web server is to store, process, and deliver web pages to clients. 
The communication between client and server takes place using the Hypertext Transfer Protocol (HTTP).

Pages delivered are most frequently HTML documents, which may include images, style sheets, and scripts in addition to the text content.

Multiple web servers may be used for a high-traffic website. A user agent, commonly a web browser or web crawler, 
	initiates communication by requesting a specific resource using HTTP and the server responds with the content of that resource or an error message if unable to do so. 

The resource is typically a real file on the serverâ€™s secondary storage, but this is not necessarily the case and depends on how the webserver is implemented.

While the primary function is to serve content, full implementation of HTTP also includes ways of receiving content from clients. 
This feature is used for submitting web forms, including the uploading of files.

# General rules
â€¢ Your program should not crash in any circumstances (even when it runs out of memory), and should not quit unexpectedly.
â€¢ You have to turn in a Makefile which will compile your source files. It must not relink.
â€¢ Your Makefile must at least contain the rules: $(NAME), all, clean, fclean and re.
â€¢ Compile your code with c++ and the flags -Wall -Wextra -Werror
â€¢ Your code must comply with the C++ 98 standard. Then, it should still compile if you add the flag -std=c++98.
â€¢ Try to always develop using the most C++ features you can (for example, choose <cstring> over <string.h>). 
â€¢ You are allowed to use C functions, but always prefer their C++ versions if possible.
â€¢ Any external library and Boost libraries are forbidden.

Program name: webserv
Description: A HTTP server in C++ 98. When you finally understand why a URL starts with HTTP
Turn in files: Makefile, *.{h, hpp}, *.cpp, *.tpp, *.ipp,
configuration files: Makefile NAME, all, clean, fclean, re
Arguments: [A configuration file]
External functs: Everything in C++ 98.
execve, dup, dup2, pipe, strerror, gai_strerror,
errno, dup, dup2, fork, htons, htonl, ntohs, ntohl,
select, poll, epoll (epoll_create, epoll_ctl,
epoll_wait), kqueue (kqueue, kevent), socket,
accept, listen, send, recv, bind, connect,
getaddrinfo, freeaddrinfo, setsockopt, getsockname,
getprotobyname, fcntl
Libft authorized n/a

Your executable will be run as follows:
./webserv [configuration file]

# Requirements
â€¢ Your program has to take a configuration file as argument, or use a default path.
â€¢ You canâ€™t execve another web server.
â€¢ Your server must never block and the client can be bounced properly if necessary.
â€¢ It must be non-blocking and use only 1 poll() (or equivalent) for all the I/O operations between the client and the server (listen included).
â€¢ poll() (or equivalent) must check read and write at the same time.
â€¢ You must never do a read or a write operation without going through poll() (or equivalent).
â€¢ Checking the value of errno is strictly forbidden after a read or a write operation.
â€¢ You donâ€™t need to use poll() (or equivalent) before reading your configuration file.

Because you have to use non-blocking file descriptors, it is possible to use read/recv or write/send functions with no poll() (or equivalent), and your server wouldnâ€™t be blocking.
But it would consume more system resources. Thus, if you try to read/recv or write/send in any file descriptor without using poll() (or equivalent), your grade will be 0.

â€¢ You can use every macro and define like FD_SET, FD_CLR, FD_ISSET, FD_ZERO (understanding what and how they do it is very useful).
â€¢ A request to your server should never hang forever.
â€¢ Your server must be compatible with the web browser of your choice.
â€¢ We will consider that NGINX is HTTP 1.1 compliant and may be used to compare headers and answer behaviors.
â€¢ Your HTTP response status codes must be accurate.
â€¢ You server must have default error pages if none are provided.
â€¢ You canâ€™t use fork for something else than CGI (like PHP, or Python, and so forth).
â€¢ You must be able to serve a fully static website.
â€¢ Clients must be able to upload files.
â€¢ You need at least GET, POST, and DELETE methods.
â€¢ Stress tests your server. It must stay available at all cost.
â€¢ Your server must be able to listen to multiple ports (see Configuration file).


# Configuration file

In the configuration file, you should be able to:
â€¢ Choose the port and host of each â€™serverâ€™.
â—¦ Turn on or off directory listing. 
â€¢ Setup the server_names or not.
â€¢ Limit client body size.
â€¢ Setup default error pages.
â€¢ The first server for a host:port will be the default for this host:port 
	(that means it will answer to all the requests that donâ€™t belong to an other server).

â€¢ Setup routes with one or multiple of the following rules/configuration (routes wont be using regexp):
â—¦ 	Define a list of accepted HTTP methods for the route.
â—¦ 	Define a HTTP redirection.
â—¦ 	Define a directory or a file from where the file should be searched 
	(for example, if url /kapouet is rooted to /tmp/www, url /kapouet/pouic/toto/pouet is /tmp/www/pouic/toto/pouet).
â—¦ 	Set a default file to answer if the request is a directory.
â—¦ 	Execute CGI based on certain file extension (for example .php).
â—¦ 	Make it work with POST and GET methods.
â—¦ 	Make the route able to accept uploaded files and configure where they should be saved.

âˆ— Do you wonder what a CGI is?
âˆ— Because you wonâ€™t call the CGI directly, use the full path as PATH_INFO.
âˆ— Just remember that, for chunked request, your server needs to unchunk it, the CGI will expect EOF as end of the body.
âˆ— Same things for the output of the CGI. If no content_length is returned from the CGI, EOF will mark the end of the returned data.
âˆ— Your program should call the CGI with the file requested as first argument.
âˆ— The CGI should be run in the correct directory for relative path file access.
âˆ— Your server should work with one CGI (php-CGI, Python, and so forth).

You must provide some configuration files and default basic files to test and demonstrate every feature works during evaluation.
You can get some inspiration from the â€™serverâ€™ part of NGINX configuration file.
The important thing is resilience. Your server should never die.
Write your tests with a more convenient language such as Python or Golang, and so forth. 

# Bonus part
Here are the extra features you can add:

â€¢ Support cookies and session management (prepare quick examples).
â€¢ Handle multiple CGI.

The bonus part will only be assessed if the mandatory part is PERFECT. 
Perfect means the mandatory part has been integrally done and works without malfunctioning.
If you have not passed ALL the mandatory requirements, your bonus part will not be evaluated at all.


